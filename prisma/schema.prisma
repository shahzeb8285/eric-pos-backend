datasource db {
  provider = "cockroachdb"

  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Config {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  key        String
  value      String
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  merchantId String?
}

model Merchant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  configs   Config[]
  name      String   @unique
  users     User[]
  password  String
}

model User {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  username             String                 @unique
  wallet               Wallet?                @relation(fields: [walletId], references: [address])
  incomingTransactions IncomingTransactions[]
  outgoingTransactions OutgoingTransactions[]

  walletId   String?   @unique
  merchantId String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  password  String
}

model Wallet {
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  address              String                 @id @unique
  user                 User?
  
  incomingTransactions IncomingTransactions[]
  outgoingTransactions OutgoingTransactions[]

  lastAssignedAt       DateTime?
  pathId               Int
  // balances             Balances?
  isReadyForSettlement Boolean       @default(false)
  settlements          Settlements[]
  idrtBalance String?
  bnbBalance String?
}

model Settlements {
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  settlementTxnHash String   @id @unique
  settlementAmount  String
  settlementAddress String
  currencySymbol    String
  totalGasFeePaid   String
  fromWallet        Wallet   @relation(fields: [fromWalletAddress], references: [address])
  fromWalletAddress String
}

// model Balances {
//   id             String   @id @default(cuid())
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt
//   walletAddress  String   @unique
//   currencySymbol String
//   balance        String
//   wallet         Wallet?  @relation(fields: [walletAddress], references: [address])
// }

model OutgoingTransactions {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  txnHash        String   @id @unique
  toAddress      String
  userId         String?
  user           User?    @relation(fields: [userId], references: [id])
  amount         String
  gasFee         String?
  currencySymbol String
  walletId       String?
  wallet         Wallet?  @relation(fields: [walletId], references: [address])
}

model IncomingTransactions {
  createdAt      DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  txnHash        String                    @id @unique
  fromAddress    String
  userId         String?
  user           User?                     @relation(fields: [userId], references: [id])
  amount         String
  gasFee         String?
  commission     String
  currencySymbol String
  walletId       String?
  wallet         Wallet?                   @relation(fields: [walletId], references: [address])
  isOrphanTxn    Boolean                   @default(false)
  callbackStatus TransactionCallBackStatus @default(UNACK)
}

model WalletAssignment {
  id         String    @id @default(cuid())
  attachedAt DateTime  @default(now())
  detachedAt DateTime?
  userId     String
  walletId   String
}

model OrphanHistory {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  txnHash   String   @unique
  userId    String
}

model GlobalSettings {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  settings  String // settings in json
}

enum TransactionCallBackStatus {
  ACK
  UNACK
}
