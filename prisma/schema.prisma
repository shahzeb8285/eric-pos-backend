datasource db {
  provider = "postgresql"

  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Config {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  key        String
  value      String
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  merchantId String?
}

model Merchant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  configs   Config[]
  name      String   @unique
  users     User[]
  password  String
}

model User {
  id                   String                 @id @default(cuid())
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  username             String                 @unique
  wallet               Wallet?                @relation(fields: [walletId], references: [address])
  incomingTransactions IncomingTransactions[]
  outgoingTransactions OutgoingTransactions[]

  walletId   String?   @unique
  merchantId String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
}

model Admin {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  password  String
}

model Wallet {
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  address              String                 @id @unique
  user                 User?
  incomingTransactions IncomingTransactions[]
  outgoingTransactions OutgoingTransactions[]

  lastAssignedAt DateTime
  pathId         Int
  balances       Balances?
}

model Settlements {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  amount         String
  txnHash        String   @id @unique
  currencySymbol String
  fromAddress    String
  toAddress      String
}

model Balances {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  walletAddress  String   @id @unique
  currencySymbol String
  balance        String
  wallet Wallet? @relation(fields: [walletAddress], references: [address])
}


model OutgoingTransactions {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  txnHash        String   @id @unique
  toAddress      String
  userId         String?
  user           User?    @relation(fields: [userId], references: [id])
  amount         String
  gasFee         String?
  currencySymbol String
  walletId       String?
  wallet         Wallet?  @relation(fields: [walletId], references: [address])
}

model IncomingTransactions {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  txnHash        String   @id @unique
  fromAddress    String
  userId         String?
  user           User?    @relation(fields: [userId], references: [id])
  amount         String
  gasFee         String?
  currencySymbol String
  walletId       String?
  wallet         Wallet?  @relation(fields: [walletId], references: [address])
}
